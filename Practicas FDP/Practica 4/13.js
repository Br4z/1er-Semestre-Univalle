/*

                 *¬¥¬®) 
                ¬∏.‚Ä¢¬¥ ¬∏.‚Ä¢¬¥¬∏.‚Ä¢*¬¥¬®) ¬∏.‚Ä¢*¬®) 
                (¬∏.‚Ä¢¬¥ (¬∏.‚Ä¢` ¬§ ùï≠ùñóùñÜùñìùñâùñîùñì ùïÆùñÜùñëùñâùñäùñóùñîùñì ùïªùñóùñéùñäùñôùñî  
       .---.         
      /     \   ùñàùñÜùñëùñâùñäùñóùñîùñì.ùñáùñóùñÜùñìùñâùñîùñì@ùñàùñîùñóùñóùñäùñîùñöùñìùñéùñõùñÜùñëùñëùñä.ùñäùñâùñö.ùñàùñî      
      \.@-@./               
      /`\_/`\               202125974
     //  _  \\        
    | \     )|_        ùï¥ùñìùñåùñäùñìùñéùñäùñóùñéùñÜ ùñâùñä ùñòùñéùñòùñôùñäùñíùñÜùñò
   /`\_`>  <_/ \
   \__/'---'\__/

*/

/*

Prop√≥sito: Hallar el siguiente estado partiendo de el estado actual y su verificaci√≥n.
Contrato:  string, boolean -> string
Prototipo: semaforo(string, boolean)
Ejemplos: 
("amarillo", true) -> "verde"
("rojo", true)     -> "amarillo"

*/

function semaforo(c, e) {
    if (c == "amarillo" && e === true) {
        return "verde";
    } else if (c == "amarillo" && e === false) {
        return "rojo";
    } else if ((c == "verde" || c == "rojo") && e == true) {
        return "amarillo";
    } else {
        return "color no v√°lido";
    }
}

console.log(semaforo("amarillo", true));
console.log(semaforo("verde", true));
console.log(semaforo("rojo", true));
console.log(semaforo("amarillo", false));
console.log(semaforo("azul", false));
